stages:
  - pre-test
  - test
  - build
  - deploy
  - cleanup

variables:
  PYTHON_VERSION: "3.8"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_REPOSITORY: ${DOCKER_REPOSITORY_BASE_URI}/tc-data/airflow
  DOCKER_IMAGE_TAG: gitlab-${CI_PIPELINE_ID}
  APP_NAME: "airflow"

black:
  stage: pre-test
  tags:
    - k8s
  image: python:${PYTHON_VERSION}
  script:
    - pip install black
    - black --check .

mypy:
  stage: test
  tags:
    - k8s
  image: python:${PYTHON_VERSION}
  script:
    - pip install -r requirements.txt && pip install pytest-mypy
    - pytest --mypy --junit-xml=mypy.xml dags
  artifacts:
    when: always
    reports:
      junit: mypy.xml
  except:
    variables:
      - $TEST_DISABLED

flakes:
  stage: test
  tags:
    - k8s
  image: python:${PYTHON_VERSION}
  script:
    - pip install -r requirements.txt && pip install pytest-flakes
    - pytest --flakes --junitxml=flakes.xml --ignore=legacy_tests dags
  artifacts:
    when: always
    reports:
      junit: flakes.xml
  except:
    variables:
      - $TEST_DISABLED

test:
  stage: test
  tags:
    - docker
  image: python:${PYTHON_VERSION}
  script:
    - pip install -r requirements.txt && pip install pytest-cov
    - python -m pytest --ignore=legacy_tests/ --cov=. --cov-report=xml:cov.xml --cov-report=term --junitxml=pytest.xml
  artifacts:
    when: always
    reports:
      junit: pytest.xml
      cobertura: cov.xml
  coverage: /^TOTAL.+?(\d+\%)$/

build_image:
  stage: build
  tags:
    - docker
  services:
    - docker:stable-dind
  image: docker:stable
  script:
    - apk add -U python3 && python3 -m ensurepip && pip3 install awscli
    - $(aws ecr get-login --no-include-email --region ca-central-1)
    - docker build --build-arg GIT_USERNAME=gitlab-ci-token --build-arg GIT_PASSWORD=${CI_JOB_TOKEN} -t ${DOCKER_REPOSITORY}:${DOCKER_IMAGE_TAG} .
    - docker push ${DOCKER_REPOSITORY}:${DOCKER_IMAGE_TAG}

sast:
  stage: test
  tags:
    - k8s
  image: python:${PYTHON_VERSION}
  script:
    - pip install bandit
    - bandit -r . -f xml -ll -o sast.xml
  artifacts:
    when: always
    paths:
      - sast.xml
    reports:
      junit: sast.xml

check_dependencies:
  stage: test
  tags:
    - k8s
  image: python:${PYTHON_VERSION}
  script:
    - pip install safety
    - safety check -r requirements.txt

deploy_production:
  stage: deploy
  tags:
    - k8s
  image:
    name: pgag/kubectl-jsonnet
    entrypoint: [""]
  script:
    - |
      jsonnet -J /ksonnet-lib k8s/app.jsonnet \
        -V APP_NAME \
        -V KUBE_NAMESPACE \
        -V DOCKER_REPOSITORY \
        -V DOCKER_IMAGE_TAG \
        -V FERNET_KEY \
        -V WEBSERVER_SECRET_KEY \
        -V AWS_SES_USERNAME \
        -V AWS_SES_PASSWORD \
        -V OIDC_CLIENT_ID \
        -V OIDC_CLIENT_SECRET \
        -V BACKUPS_AWS_ACCESS_KEY_ID \
        -V BACKUPS_AWS_SECRET_ACCESS_KEY \
        -V CI_ENVIRONMENT_SLUG | kubectl --token=${KUBE_TOKEN} apply -f -
  environment:
    name: production
    url: https://airflow.tcdata.co/${CI_ENVIRONMENT_SLUG}
  only:
    - master

deploy_review:
  stage: deploy
  tags:
    - k8s
  image:
    name: pgag/kubectl-jsonnet
    entrypoint: [""]
  script:
    - |
      jsonnet -J /ksonnet-lib k8s/app.jsonnet \
        -V APP_NAME \
        -V KUBE_NAMESPACE \
        -V DOCKER_REPOSITORY \
        -V DOCKER_IMAGE_TAG \
        -V FERNET_KEY \
        -V WEBSERVER_SECRET_KEY \
        -V AWS_SES_USERNAME \
        -V AWS_SES_PASSWORD \
        -V OIDC_CLIENT_ID \
        -V OIDC_CLIENT_SECRET \
        -V BACKUPS_AWS_ACCESS_KEY_ID \
        -V BACKUPS_AWS_SECRET_ACCESS_KEY \
        -V CI_ENVIRONMENT_SLUG | kubectl --token=${KUBE_TOKEN} apply -f -
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://airflow.tcdata.co/${CI_ENVIRONMENT_SLUG}
    on_stop: stop_review
  only:
    - branches
  except:
    - master

stop_review:
  stage: cleanup
  tags:
    - k8s
  variables:
    GIT_STRATEGY: none
  image:
    name: pgag/kubectl-jsonnet
    entrypoint: [""]
  script:
    - |
      kubectl --token=${KUBE_TOKEN} -n ${KUBE_NAMESPACE} \
      delete deploy,service,ingress,secret,postgres,serviceinstance,servicebinding \
      -l app=${APP_NAME},env=${CI_ENVIRONMENT_SLUG}
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  only:
    - branches
  except:
    - master
